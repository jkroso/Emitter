!function(){function n(t){var c=r[t];return"string"==typeof c&&Function("module","exports","require","eval("+JSON.stringify(c+"\n//@ sourceURL=/"+t)+")").call((r[t]=c={exports:{}}).exports,c,c.exports,n),c.exports}var r=["'use strict';\r\n\r\nmodule.exports = Emitter\r\n\r\nfunction Emitter () {this._callbacks = {}}\r\n\r\nEmitter.new = function () {\r\n    return new(this)\r\n}\r\n\r\nEmitter.mixin = function (obj) {\r\n    Object.keys(proto).forEach(function (key) {\r\n        Object.defineProperty(obj, key, {\r\n            value: proto[key], \r\n            writable:true,\r\n            configurable:true \r\n        })\r\n    })\r\n    return obj\r\n}\r\n\r\nvar proto = Emitter.prototype\r\n\r\nproto.emit = proto.publish = function (topic, data) {\r\n    var calls\r\n    if ((calls = this._callbacks) && (calls = calls[topic])) {\r\n        topic = calls.length\r\n        while (topic--) {\r\n            calls[topic].call(calls[--topic], data)\r\n        }\r\n    }\r\n    return this\r\n}\r\n\r\nproto.on = function (topics, callback, context) {\r\n    topics = topics.split(/\\s+/)\r\n    var calls = this._callbacks || (this._callbacks = {}),\r\n        i = topics.length\r\n\r\n    while (i--)\r\n        // Push to the front of the array; Using concat to avoid mutating the old array\r\n        calls[topics[i]] = [context || this, callback].concat(calls[topics[i]] || [])\r\n\r\n    return this\r\n}\r\n\r\nproto.once = function (topics, callback, context) {\r\n    var self = this\r\n    return this.on(\r\n        topics, \r\n        function on (data) {\r\n            self.off(topics, on)\r\n            return callback.call(context, data)\r\n        }, \r\n        context\r\n    )\r\n}\r\n\r\nproto.off = function (topics, callback) {\r\n    var calls\r\n    if ( calls = this._callbacks ) {\r\n        if ( topics ) {\r\n            if ( callback ) {\r\n                topics.split(/\\s+/).forEach(function (topic) {\r\n                    var events = calls[topic]\r\n                    if ( events ) {\r\n                        events = events.slice()\r\n                        var i = events.length\r\n                        while (i--) {\r\n                            if (events[i--] === callback) {\r\n                                events.splice(i, 2)\r\n                                calls[topic] = events\r\n                                break\r\n                            }\r\n                        }\r\n                    }                \r\n                })\r\n            } \r\n            else {\r\n                topics.split(/\\s+/).forEach(function (topic) {\r\n                    delete calls[topic]\r\n                })\r\n            }\r\n        } \r\n        else {\r\n            this._callbacks = {}\r\n        }\r\n    }\r\n    return this\r\n}\n//@ sourceURL=/home/jkroso/Dev/Libraries/Emitter/src/index.js"];n(0)}();